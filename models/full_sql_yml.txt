# the following is a full bit of code from a dbt project. I have the error: 

15:43:11  1 of 6 START sql view model testing.stg_customer_feedback ...................... [RUN]
15:43:11  2 of 6 START sql view model testing.stg_customers .............................. [RUN]
15:43:11  3 of 6 START sql view model testing.stg_energy_consumption ..................... [RUN]
15:43:12  3 of 6 OK created sql view model testing.stg_energy_consumption ................ [OK in 0.64s]
15:43:12  2 of 6 OK created sql view model testing.stg_customers ......................... [OK in 0.66s]
15:43:12  1 of 6 OK created sql view model testing.stg_customer_feedback ................. [OK in 0.70s]
15:43:12  4 of 6 START sql table model testing.monthly_consumption ....................... [RUN]
15:43:12  5 of 6 START sql table model testing.aggregated_feedback ....................... [RUN]
15:43:13  5 of 6 ERROR creating sql table model testing.aggregated_feedback .............. [ERROR in 0.49s]
15:43:13  4 of 6 ERROR creating sql table model testing.monthly_consumption .............. [ERROR in 0.52s]
15:43:13  6 of 6 SKIP relation testing.customer_profiles ................................. [SKIP]
15:43:13
15:43:13  Finished running 3 view models, 3 table models in 0 hours 0 minutes and 2.35 seconds (2.35s).
15:43:13
15:43:13  Completed with 2 errors and 0 warnings:
15:43:13
15:43:13    Runtime Error in model aggregated_feedback (models\aggregated_feedback.sql)
  Parser Error: syntax error at or near ";"
15:43:13
15:43:13    Runtime Error in model monthly_consumption (models\monthly_consumption.sql)
  Parser Error: syntax error at or near ";"
15:43:13
15:43:13  Done. PASS=3 WARN=0 ERROR=2 SKIP=1 TOTA



# /models/staging
# schema staging

version: 2

sources:
  - name: aether_energy_analytics
    schema: main  # which schema am I referring to here???
    tables:
      - name: customer_feedback
      - name: customers
      - name: energy_consumption

## These models here, since we are in staging, are the models post transformation - after they have been transformed from the source

models:
  - name: stg_customers
    # description: "Raw customer data"
    columns:
      - name: customer_id
        description: "The unique identifier for a customer"
        tests:
          - unique
          - not_null
      - name: customer_name
        description: "The name of the customer"
        tests:
          - not_null
      - name: region
        description: "The region of the customer"
        tests:
          - not_null
      - name: age
        description: "Age of the customer"
        tests:
          - not_null
      # Note: Gender is excluded here

  - name: stg_customer_feedback
    # description: "Raw customer feedback data"
    columns:
      - name: feedback_date
        description: "The date the feedback was given"
      - name: customer_id
        description: "The unique identifier for a customer"
        tests:
          - not_null
      - name: rating
        description: "The rating given by the customer"
        tests:
          - not_null
      - name: comments
        description: "Comments given by the customer"

  - name: stg_energy_consumption
    # description: "Raw energy consumption data"
    columns:
      - name: timestamp
        description: "The timestamp of the energy consumption reading"
      - name: customer_id
        description: "The unique identifier for a customer"
        tests:
          - not_null
      - name: energy_usage_kWh
        description: "The amount of energy used in kWh"
        tests:
          - not_null

# stg_customer_feedback

with source as (

    -- Pull from source from the db. Different if we were using seeds. 

    select * from {{ source('aether_energy_analytics', 'customer_feedback') }}

),

-- this could also be considered as 'cleaning' renaming columns, selecting only some columns etc. 
renamed as (

    select
        feedback_date--as timerstamp
        customer_id,
        rating
    from source

)

select * from renamed

# stg_customers.sql

with source as (

    -- Pull from source from the db. Different if we were using seeds. 

    select * from {{ source('aether_energy_analytics', 'customers') }}
),

renamed as (

    select
        customer_id
        customer_name, --as namer,
        age,
        region
        -- note we are not including gender, just to make it interesting

    from source

)

select * from renamed

# stg_energy_consumption.sql

with source as (

    -- Pull from source from the db. Different if we were using seeds. 

    select * from {{ source('aether_energy_analytics','energy_consumption')}}

),

renamed as (

    select
        timestamp,
        customer_id
       energy_usage_kWh

    from source

)

select * from renamed

# /models
# schema

version: 2

models:
  - name: aggregated_feedback
    description: "Aggregated customer feedback data including average rating and feedback count per customer."
    columns:
      - name: customer_id
        description: "The unique identifier for a customer."
        tests:
          - unique
          - not_null
          - relationships:
              to: ref('stg_customers')
              field: customer_id
      - name: avg_rating
        description: "The average rating given by the customer."
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5]
      - name: feedback_count
        description: "The total number of feedback entries for the customer."
        tests:
          - not_null

  - name: monthly_consumption
    description: "Monthly energy consumption data per customer."
    columns:
      - name: month
        description: "The month of the energy consumption data."
        tests:
          - not_null
      - name: customer_id
        description: "The unique identifier for a customer."
        tests:
          - not_null
          - relationships:
              to: ref('stg_customers')
              field: customer_id
      - name: total_energy_usage
        description: "The total energy usage in kWh for the month."
        tests:
          - not_null

  - name: customer_profiles
    description: "Comprehensive customer profile including demographics, feedback, and energy consumption data."
    columns:
      - name: customer_id
        description: "The unique identifier for a customer."
        tests:
          - unique
          - not_null
          - relationships:
              to: ref('stg_customers')
              field: customer_id
      - name: customer_name
        description: "The name of the customer."
        tests:
          - not_null
      - name: age
        description: "The age of the customer."
        tests:
          - not_null
      - name: region
        description: "The region where the customer is located."
        tests:
          - not_null
      - name: avg_rating
        description: "The average rating given by the customer."
        tests:
          - not_null
          - accepted_values:
              values: [1, 2, 3, 4, 5]
      - name: feedback_count
        description: "The total number of feedback entries for the customer."
        tests:
          - not_null
      - name: total_energy_usage
        description: "The total energy usage in kWh for the customer."
        tests:
          - not_null

# monthly_consumption.sql
-- Monthly energy consumption data per customer

with consumption as (
    select
        customer_id,
        date_trunc('month', timestamp) as month,
        sum(energy_usage_kWh) as total_energy_usage
    from {{ ref('stg_energy_consumption') }}
    group by customer_id, month
)

select
    c.month,
    c.customer_id,
    c.total_energy_usage
from consumption c
join {{ ref('stg_customers') }} sc on c.customer_id = sc.customer_id;

# customer_profiles.sql
-- Comprehensive customer profile including demographics, feedback, and energy consumption data

with customer_feedback as (
    select
        customer_id,
        avg(rating) as avg_rating,
        count(*) as feedback_count
    from {{ ref('stg_customer_feedback') }}
    group by customer_id
),

consumption as (
    select
        customer_id,
        date_trunc('month', timestamp) as month,
        sum(energy_usage_kWh) as total_energy_usage
    from {{ ref('stg_energy_consumption') }}
    group by customer_id, month
)

select
    sc.customer_id,
    sc.customer_name,
    sc.age,
    sc.region,
    cf.avg_rating,
    cf.feedback_count,
    c.total_energy_usage
from {{ ref('stg_customers') }} sc
left join customer_feedback cf on sc.customer_id = cf.customer_id
left join consumption c on sc.customer_id = c.customer_id;


# aggregated_feedback.sql

-- Aggregated customer feedback data including average rating and feedback count per customer

with customer_feedback as (
    select
        customer_id,
        avg(rating) as avg_rating,
        count(*) as feedback_count
    from {{ ref('stg_customer_feedback') }}
    group by customer_id
)

select
    cf.customer_id,
    cf.avg_rating,
    cf.feedback_count
from customer_feedback cf
join {{ ref('stg_customers') }} sc on cf.customer_id = sc.customer_id;


# profiles.yml

aether_energy_analytics:

  target: dev
  outputs:
    dev:
      type: duckdb
      path: 'aether_energy_analytics.duckdb'
      threads: 24
      schema: 'testing'
    prod:
      type: duckdb
      path: 'aether_energy_analytics.duckdb'
      threads: 24
      schema: 'prod'


name: 'aether_energy_analytics'

config-version: 2
version: '0.1'

profile: 'aether_energy_analytics'

model-paths: ["models"]
# seed-paths: ["seeds"]
test-paths: ["tests"]
analysis-paths: ["analysis"]
macro-paths: ["macros"]

target-path: "target"
clean-targets:
    - "target"
    - "dbt_modules"
    - "logs"

require-dbt-version: [">=1.0.0", "<2.0.0"]

models:
  aether_energy_analytics:
    materialized: table
    staging:
      materialized: view
      +docs:
        node_color: 'silver'
    +docs:
      node_color: 'gold'